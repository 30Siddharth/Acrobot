
% tspan = 0:0.001:10;
% x0 = [0,0,0,0];
xs = csvread('Gridpts.csv');
us = csvread('Control.csv');
x0 = [0,0,0,0];
storestate = [];
storetime = [];
%% ODE
for i =1:1:length(us)
    xt = xs(i,:);
    ut = us(i);
    
    A = getA(xt,ut);
    B = getB(xt);
    f0 = getF0(xt,ut);
    
    
    tspan = 0:0.01:0.1;
 
    [t,state] = ode45(@(t,x) dynamics(t,x,A,B,f0,xt,ut),tspan,x0);
    x0 = state(end,:);
    storestate = [storestate;state(2:end,:)];
    storetime = [storetime;t(2:end) + (i-1)*tspan(end)];
end


m1 = 8;
m2 = 8;
l1 = 0.5;
l2 = 1;
g  = 9.81;
I1 = m1*l1^2;
I2 = m2*l2^2;
state = storestate;
state(:,1:2) = state(:,1:2)/pi;
x1 = l1*sin(state(:,1));
y1 = -l1*cos(state(:,1));

x2 = x1 + l2*sin(state(:,1) + state(:,2));
y2 = y1 - l2*cos(state(:,1) + state(:,2));
% 
% figure(1)
% plot(t,state,'LineWidth',3);
% legend('q1','q2','q1dot','q2dot');
% grid on
% plot(storetime,storestate)

%% Animation
k = length(st);
for t = 1:1:k
    
    % Plot of pendulum in starting postion
    figure(2)
    hold on;
    plot([0,x1(t)],[0,y1(t)], 'LineWidth', 4)
    plot([x1(t),x2(t)],[y1(t),y2(t)], 'LineWidth', 4)
    plot(x1(t),y1(t),'o','MarkerFaceColor','red','MarkerSize',6);
    plot(x2(t),y2(t),'o','MarkerFaceColor','red','MarkerSize',6);
    grid on
    axis equal
    
end

%% Dynamics 
function dxdt = dynamics(t,x,A,B,f0,x0,u0)
Q = 100*eye(4);
R = 1;

[X,K,L] = icare(A,B,Q,R);
u = -K*(x-x0');
dxdt = A*(x-x0') + B*(u-u0) +f0;

end

function A = getA(x0,u0)
%% Linearizing the Model
syms q1 q2 q1dot q2dot 

% Parameters
m1 = 8;
m2 = 8;
l1 = 0.5;
l2 = 1;
g  = 9.81;
I1 = m1*l1^2;
I2 = m2*l2^2;


%%
M = [I1+I2+m2*l1^2 + 2*m2*l1*l2*cos(q2),  I2+ m2*l1*l2*cos(q2);
           I2 + m2*l1*l2*cos(q2),                      I2];
       
C = [-2*m2*l1*l2*sin(q2)*q2dot,  -m2*l1*l2*sin(q2)*q2dot;
     m2*l1*l2*sin(q2)*q1dot,              0];
 
T = [-m1*g*l1*sin(q1)-m2*g*(l1*sin(q1) + l2*sin(q1+q2));
            -m2*g*l2*sin(q1+q2)];
       
f2 = inv(M)*{T - C*[q1dot;q2dot]};

f1 = [q1dot;q2dot];

f = [f1;f2];
g = [0;0;inv(M)*[0;1]];

%%
diff_f = jacobian(f + g*u0,[q1,q2,q1dot,q2dot]);
A = double(subs(diff_f,[q1,q2,q1dot,q2dot], x0));

end

function B = getB(x0)
syms q1 q2 q1dot q2dot 

% Parameters
m1 = 8;
m2 = 8;
l1 = 0.5;
l2 = 1;
g  = 9.81;
I1 = m1*l1^2;
I2 = m2*l2^2;


%%
M = [I1+I2+m2*l1^2 + 2*m2*l1*l2*cos(q2),  I2+ m2*l1*l2*cos(q2);
           I2 + m2*l1*l2*cos(q2),                      I2];
       
g = [0;
    0;
    inv(M)*[0;1]];
B = double(subs(g, [q1,q2,q1dot,q2dot],x0));
end

function f0 = getF0(x0,u0)
syms q1 q2 q1dot q2dot 

%% F0
m1 = 8;
m2 = 8;
l1 = 0.5;
l2 = 1;
g  = 9.81;
I1 = m1*l1^2;
I2 = m2*l2^2;


%%
M = [I1+I2+m2*l1^2 + 2*m2*l1*l2*cos(q2),  I2+ m2*l1*l2*cos(q2);
           I2 + m2*l1*l2*cos(q2),                      I2];
       
C = [-2*m2*l1*l2*sin(q2)*q2dot,  -m2*l1*l2*sin(q2)*q2dot;
     m2*l1*l2*sin(q2)*q1dot,              0];
 
T = [-m1*g*l1*sin(q1)-m2*g*(l1*sin(q1) + l2*sin(q1+q2));
            -m2*g*l2*sin(q1+q2)];
       
f2 = inv(M)*{T - C*[q1dot;q2dot]};

f1 = [q1dot;q2dot];

f = [f1;f2] ;
g = [0;
    0;
    inv(M)*[0;1]];

f0 = double(subs(f+g*u0,[q1,q2,q1dot,q2dot], x0));
end
        
